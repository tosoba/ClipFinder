/**
 * Spotify Web API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.clipfinder.spotify.api.models

import com.squareup.moshi.Json

/**
 *
 * @param album
 * @param artists The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.
 * @param availableMarkets A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.
 * @param discNumber The disc number (usually 1 unless the album consists of more than one disc).
 * @param durationMs The track length in milliseconds.
 * @param explicit Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown).
 * @param externalIds
 * @param externalUrls
 * @param href A link to the Web API endpoint providing full details of the track.
 * @param id The Spotify ID for the track.
 * @param isPlayable Part of the response when Track Relinking is applied. If true , the track is playable in the given market. Otherwise false.
 * @param linkedFrom
 * @param name The name of the track.
 * @param popularity The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time.
 * @param previewUrl A link to a 30 second preview (MP3 format) of the track. Can be null
 * @param restrictions Part of the response when Track Relinking is applied, the original track is not available in the given market, and Spotify did not have any tracks to relink it with. The track response will still contain metadata for the original track, and a restrictions object containing the reason why the track is not available: \"restrictions\" : {\"reason\" : \"market\"}
 * @param trackNumber The number of the track. If an album has several discs, the track number is the number on the specified disc.
 * @param type The object type: “track”.
 * @param uri The Spotify URI for the track.
 */

data class TrackObject(
    @Json(name = "album")
    val album: SimplifiedAlbumObject? = null,
    /* The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist. */
    @Json(name = "artists")
    val artists: List<ArtistObject>? = null,
    /* A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. */
    @Json(name = "available_markets")
    val availableMarkets: List<String>? = null,
    /* The disc number (usually 1 unless the album consists of more than one disc). */
    @Json(name = "disc_number")
    val discNumber: Int? = null,
    /* The track length in milliseconds. */
    @Json(name = "duration_ms")
    val durationMs: Int? = null,
    /* Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown). */
    @Json(name = "explicit")
    val explicit: Boolean? = null,
    @Json(name = "external_ids")
    val externalIds: ExternalIdObject? = null,
    @Json(name = "external_urls")
    val externalUrls: Any? = null,
    /* A link to the Web API endpoint providing full details of the track. */
    @Json(name = "href")
    val href: String? = null,
    /* The Spotify ID for the track. */
    @Json(name = "id")
    val id: String? = null,
    /* Part of the response when Track Relinking is applied. If true , the track is playable in the given market. Otherwise false. */
    @Json(name = "is_playable")
    val isPlayable: Boolean? = null,
    @Json(name = "linked_from")
    val linkedFrom: LinkedTrackObject? = null,
    /* The name of the track. */
    @Json(name = "name")
    val name: String? = null,
    /* The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time. */
    @Json(name = "popularity")
    val popularity: Int? = null,
    /* A link to a 30 second preview (MP3 format) of the track. Can be null */
    @Json(name = "preview_url")
    val previewUrl: String? = null,
    /* Part of the response when Track Relinking is applied, the original track is not available in the given market, and Spotify did not have any tracks to relink it with. The track response will still contain metadata for the original track, and a restrictions object containing the reason why the track is not available: \"restrictions\" : {\"reason\" : \"market\"} */
    @Json(name = "restrictions")
    val restrictions: List<TrackRestrictionObject>? = null,
    /* The number of the track. If an album has several discs, the track number is the number on the specified disc. */
    @Json(name = "track_number")
    val trackNumber: Int? = null,
    /* The object type: “track”. */
    @Json(name = "type")
    val type: String? = null,
    /* The Spotify URI for the track. */
    @Json(name = "uri")
    val uri: String? = null
)

